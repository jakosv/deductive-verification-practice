theory Homework2
  use int.Int
  use int.Power

  predicate phi (x: int) =
    x >= 0

  predicate psi (x: int) (z: int) =
    (z*z*z <= x < power (z+1) 3)


  predicate r_AA (x: int) (y1: int) (y2: int) (y3: int) =
    y2 <= x

  predicate r_AH (x: int) (y1: int) (y2: int) (y3: int) =
    y2 > x

  predicate r_sa (x: int) (y1: int) (y2: int) (y3: int) =
    true

  predicate r_sh (x: int) (y1: int) (y2: int) (y3: int) =
    (r_sa x 0 0 1) /\ (r_AH x 0 (0 + 1) 1)

  predicate p_A (x: int) (y1: int) (y2: int) (y3: int) =
    (y2 <= x) /\ (y2 = y1*y1*y1) /\ (y3 = 3*y1*(y1 + 1) + 1)
  (** (y1 >= 0) /\ (y2 >= 0) /\ (y3 >= 1) /\ (x >= (power y1 3)) /\ (y2 = (power y1 3)) /\ (y3 = (3*y1*(y1+1) + 1)) *)

  (* (y1 >= 0) /\ (y2 >= 0) /\ (y3 >= 1) /\ ((power y1 3) = y2) /\ (y3 = (3 * y1 * (y1 + 1) + 1)) *)
  (* ((power y1 3) <= x < (power (y1 + 1) 3)) *)

  (* S-A *)
  goal G1: forall x: int. (phi x) -> (p_A x 0 0 1)

  (* S-H *)
  goal G2: forall x: int. (phi x) /\ (r_sh x 0 0 1) -> (psi x 0)

  (* A-A induction step *)
  goal G3: forall x: int, y1: int, y2: int, y3: int.
    (phi x) /\ (r_AA x y1 (y2 + y3) y3) /\ (p_A x y1 y2 y3) ->
      (p_A x (y1 + 1) (y2 + y3) (y3 + 6*(y1 + 1)))

  (* A-H *)
  goal G4: forall x:int, y1: int, y2: int, y3: int.
    (phi x) /\ (r_AH x y1 (y2 + y3) y3) /\ (p_A x y1 y2 y3) -> (psi x y1)

end
